version: '3.8'

services:
  # Serviço do banco de dados PostgreSQL
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: task-manager-db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: taskmanager
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço de backend (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: task-manager-api
    restart: always
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: taskmanager
      LOG_LEVEL: debug
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    command: pnpm run dev

  # Serviço de frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: task-manager-web
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      NODE_ENV: development
      BACKEND_URL: http://backend:3001/api
      NEXT_PUBLIC_RUNNING_IN_DOCKER: 'true'
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network
    command: pnpm run dev

# Volumes para persistência de dados
volumes:
  postgres_data:

# Rede compartilhada entre os containers
networks:
  app-network:
    driver: bridge